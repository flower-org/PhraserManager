// automatically generated by the FlatBuffers compiler, do not modify

package com.phraser.schema.phraser;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PhraseHistory extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static PhraseHistory getRootAsPhraseHistory(ByteBuffer _bb) { return getRootAsPhraseHistory(_bb, new PhraseHistory()); }
  public static PhraseHistory getRootAsPhraseHistory(ByteBuffer _bb, PhraseHistory obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PhraseHistory __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int phraseTemplateId() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public boolean mutatePhraseTemplateId(int phrase_template_id) { int o = __offset(4); if (o != 0) { bb.putShort(o + bb_pos, (short) phrase_template_id); return true; } else { return false; } }
  public Word phrase(int j) { return phrase(new Word(), j); }
  public Word phrase(Word obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int phraseLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public Word.Vector phraseVector() { return phraseVector(new Word.Vector()); }
  public Word.Vector phraseVector(Word.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createPhraseHistory(FlatBufferBuilder builder,
      int phraseTemplateId,
      int phraseOffset) {
    builder.startTable(2);
    PhraseHistory.addPhrase(builder, phraseOffset);
    PhraseHistory.addPhraseTemplateId(builder, phraseTemplateId);
    return PhraseHistory.endPhraseHistory(builder);
  }

  public static void startPhraseHistory(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addPhraseTemplateId(FlatBufferBuilder builder, int phraseTemplateId) { builder.addShort(0, (short) phraseTemplateId, (short) 0); }
  public static void addPhrase(FlatBufferBuilder builder, int phraseOffset) { builder.addOffset(1, phraseOffset, 0); }
  public static int createPhraseVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPhraseVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endPhraseHistory(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PhraseHistory get(int j) { return get(new PhraseHistory(), j); }
    public PhraseHistory get(PhraseHistory obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

