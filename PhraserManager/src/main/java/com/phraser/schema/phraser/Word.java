// automatically generated by the FlatBuffers compiler, do not modify

package com.phraser.schema.phraser;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Word extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Word getRootAsWord(ByteBuffer _bb) { return getRootAsWord(_bb, new Word()); }
  public static Word getRootAsWord(ByteBuffer _bb, Word obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Word __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int wordTemplateId() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public boolean mutateWordTemplateId(int word_template_id) { int o = __offset(4); if (o != 0) { bb.putShort(o + bb_pos, (short) word_template_id); return true; } else { return false; } }
  public String word() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer wordAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer wordInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createWord(FlatBufferBuilder builder,
      int wordTemplateId,
      int wordOffset) {
    builder.startTable(2);
    Word.addWord(builder, wordOffset);
    Word.addWordTemplateId(builder, wordTemplateId);
    return Word.endWord(builder);
  }

  public static void startWord(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addWordTemplateId(FlatBufferBuilder builder, int wordTemplateId) { builder.addShort(0, (short) wordTemplateId, (short) 0); }
  public static void addWord(FlatBufferBuilder builder, int wordOffset) { builder.addOffset(1, wordOffset, 0); }
  public static int endWord(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Word get(int j) { return get(new Word(), j); }
    public Word get(Word obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

