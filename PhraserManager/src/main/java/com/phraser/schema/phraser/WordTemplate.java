// automatically generated by the FlatBuffers compiler, do not modify

package com.phraser.schema.phraser;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class WordTemplate extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static WordTemplate getRootAsWordTemplate(ByteBuffer _bb) { return getRootAsWordTemplate(_bb, new WordTemplate()); }
  public static WordTemplate getRootAsWordTemplate(ByteBuffer _bb, WordTemplate obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public WordTemplate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int wordTemplateId() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public boolean mutateWordTemplateId(int word_template_id) { int o = __offset(4); if (o != 0) { bb.putShort(o + bb_pos, (short) word_template_id); return true; } else { return false; } }
  public byte permissions() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean mutatePermissions(byte permissions) { int o = __offset(6); if (o != 0) { bb.put(o + bb_pos, permissions); return true; } else { return false; } }
  public byte icon() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean mutateIcon(byte icon) { int o = __offset(8); if (o != 0) { bb.put(o + bb_pos, icon); return true; } else { return false; } }
  public long minLength() { int o = __offset(10); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public boolean mutateMinLength(long min_length) { int o = __offset(10); if (o != 0) { bb.putInt(o + bb_pos, (int) min_length); return true; } else { return false; } }
  public long maxLength() { int o = __offset(12); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public boolean mutateMaxLength(long max_length) { int o = __offset(12); if (o != 0) { bb.putInt(o + bb_pos, (int) max_length); return true; } else { return false; } }
  public String wordTemplateName() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer wordTemplateNameAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer wordTemplateNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  public int symbolSetIds(int j) { int o = __offset(16); return o != 0 ? bb.getShort(__vector(o) + j * 2) & 0xFFFF : 0; }
  public int symbolSetIdsLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public ShortVector symbolSetIdsVector() { return symbolSetIdsVector(new ShortVector()); }
  public ShortVector symbolSetIdsVector(ShortVector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer symbolSetIdsAsByteBuffer() { return __vector_as_bytebuffer(16, 2); }
  public ByteBuffer symbolSetIdsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 2); }
  public boolean mutateSymbolSetIds(int j, int symbol_set_ids) { int o = __offset(16); if (o != 0) { bb.putShort(__vector(o) + j * 2, (short) symbol_set_ids); return true; } else { return false; } }

  public static int createWordTemplate(FlatBufferBuilder builder,
      int wordTemplateId,
      byte permissions,
      byte icon,
      long minLength,
      long maxLength,
      int wordTemplateNameOffset,
      int symbolSetIdsOffset) {
    builder.startTable(7);
    WordTemplate.addSymbolSetIds(builder, symbolSetIdsOffset);
    WordTemplate.addWordTemplateName(builder, wordTemplateNameOffset);
    WordTemplate.addMaxLength(builder, maxLength);
    WordTemplate.addMinLength(builder, minLength);
    WordTemplate.addWordTemplateId(builder, wordTemplateId);
    WordTemplate.addIcon(builder, icon);
    WordTemplate.addPermissions(builder, permissions);
    return WordTemplate.endWordTemplate(builder);
  }

  public static void startWordTemplate(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addWordTemplateId(FlatBufferBuilder builder, int wordTemplateId) { builder.addShort(0, (short) wordTemplateId, (short) 0); }
  public static void addPermissions(FlatBufferBuilder builder, byte permissions) { builder.addByte(1, permissions, 0); }
  public static void addIcon(FlatBufferBuilder builder, byte icon) { builder.addByte(2, icon, 0); }
  public static void addMinLength(FlatBufferBuilder builder, long minLength) { builder.addInt(3, (int) minLength, (int) 0L); }
  public static void addMaxLength(FlatBufferBuilder builder, long maxLength) { builder.addInt(4, (int) maxLength, (int) 0L); }
  public static void addWordTemplateName(FlatBufferBuilder builder, int wordTemplateNameOffset) { builder.addOffset(5, wordTemplateNameOffset, 0); }
  public static void addSymbolSetIds(FlatBufferBuilder builder, int symbolSetIdsOffset) { builder.addOffset(6, symbolSetIdsOffset, 0); }
  public static int createSymbolSetIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(2, data.length, 2); for (int i = data.length - 1; i >= 0; i--) builder.addShort((short) data[i]); return builder.endVector(); }
  public static void startSymbolSetIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(2, numElems, 2); }
  public static int endWordTemplate(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public WordTemplate get(int j) { return get(new WordTemplate(), j); }
    public WordTemplate get(WordTemplate obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

