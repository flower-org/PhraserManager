// automatically generated by the FlatBuffers compiler, do not modify

package com.phraser.schema.phraser;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PhraseTemplate extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static PhraseTemplate getRootAsPhraseTemplate(ByteBuffer _bb) { return getRootAsPhraseTemplate(_bb, new PhraseTemplate()); }
  public static PhraseTemplate getRootAsPhraseTemplate(ByteBuffer _bb, PhraseTemplate obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PhraseTemplate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int phraseTemplateId() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public boolean mutatePhraseTemplateId(int phrase_template_id) { int o = __offset(4); if (o != 0) { bb.putShort(o + bb_pos, (short) phrase_template_id); return true; } else { return false; } }
  public String phraseTemplateName() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer phraseTemplateNameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer phraseTemplateNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public WordTemplate wordTemplates(int j) { return wordTemplates(new WordTemplate(), j); }
  public WordTemplate wordTemplates(WordTemplate obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int wordTemplatesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public WordTemplate.Vector wordTemplatesVector() { return wordTemplatesVector(new WordTemplate.Vector()); }
  public WordTemplate.Vector wordTemplatesVector(WordTemplate.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createPhraseTemplate(FlatBufferBuilder builder,
      int phraseTemplateId,
      int phraseTemplateNameOffset,
      int wordTemplatesOffset) {
    builder.startTable(3);
    PhraseTemplate.addWordTemplates(builder, wordTemplatesOffset);
    PhraseTemplate.addPhraseTemplateName(builder, phraseTemplateNameOffset);
    PhraseTemplate.addPhraseTemplateId(builder, phraseTemplateId);
    return PhraseTemplate.endPhraseTemplate(builder);
  }

  public static void startPhraseTemplate(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addPhraseTemplateId(FlatBufferBuilder builder, int phraseTemplateId) { builder.addShort(0, (short) phraseTemplateId, (short) 0); }
  public static void addPhraseTemplateName(FlatBufferBuilder builder, int phraseTemplateNameOffset) { builder.addOffset(1, phraseTemplateNameOffset, 0); }
  public static void addWordTemplates(FlatBufferBuilder builder, int wordTemplatesOffset) { builder.addOffset(2, wordTemplatesOffset, 0); }
  public static int createWordTemplatesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startWordTemplatesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endPhraseTemplate(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PhraseTemplate get(int j) { return get(new PhraseTemplate(), j); }
    public PhraseTemplate get(PhraseTemplate obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

